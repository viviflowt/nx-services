version: '3'

networks:
  docker:
    driver: bridge

volumes:
  redis:
  postgres:
  postgres_replica:
  mongo:
  kafka:
  kong:
  mailhog:
  localstack:
  proxy-manager:

services:
  redis:
    image: bitnami/redis
    deploy:
      mode: global
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      REDIS_USER: redis
      ALLOW_EMPTY_PASSWORD: yes
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL,CONFIG
    ports:
      - '6379:6379'
    volumes:
      - redis:/bitnami/redis/data
    networks:
      - docker

  postgres:
    image: bitnami/postgresql
    deploy:
      mode: global
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: replica
      POSTGRESQL_REPLICATION_PASSWORD: replica
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/bitnami/postgresql
    networks:
      - docker

  postgres-replica:
    image: bitnami/postgresql
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: replica
      POSTGRESQL_REPLICATION_PASSWORD: replica
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    ports:
      - '5451-5452:5432'
    volumes:
      - postgres_replica:/bitnami/postgresql
    networks:
      - docker
    depends_on:
      - postgres

  mailhog:
    image: mailhog/mailhog
    deploy:
      mode: global
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    ports:
      - 1025:1025
      - 8025:8025
    volumes:
      - mailhog:/var/lib/mailhog
    networks:
      - docker
  localstack:
    image: localstack/localstack
    deploy:
      mode: global
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      # SERVICES: sqs,sns,s3,lambda,
      AWS_DEFAULT_REGION: us-east-1
      ALLOW_EMPTY_PASSWORD: 'yes'
      AWS_ACCESS_KEY_ID: SERVICE_STACK
      AWS_SECRET_ACCESS_KEY: SERVICE_STACK
      EDGE_PORT: 4566
      DEBUG: 1
      LAMBDA_REMOTE_DOCKER: 0
    ports:
      - '4566-4597:4566-4597' # Default port forward
      - '9200:4571' # Elasticsearch port forward
      - '8080:8080' # WebUI port forward
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - localstack:/tmp/localstack
    networks:
      - docker
  # proxy-manager:
  #   image: jc21/nginx-proxy-manager
  #   restart: unless-stopped
  #   ports:
  #     - '80:80' # Public HTTP Port
  #     - '443:443' # Public HTTPS Port
  #     - '81:81' # Admin Web Port
  #     # Add any other Stream port you want to expose
  #     # - '21:21' # FTP
  #   volumes:
  #     - proxy-manager:/data
  #     - proxy-manager:/etc/letsencrypt
  #   networks:
  #     - docker
  # http://127.0.0.1:81 admin@example.com/changeme

  # mongo:
  #   image: bitnami/mongodb
  #   # restart: on-failure
  #   deploy:
  #     mode: global
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #       delay: 5s
  #   environment:
  #     ALLOW_EMPTY_PASSWORD: yes
  #     MONGODB_ROOT_USER: root
  #     MONGODB_ROOT_PASSWORD: root
  #     MONGODB_USERNAME: admin
  #     MONGODB_PASSWORD: admin
  #     MONGO_INITDB_DATABASE: database
  #   ports:
  #     - '27017:27017'
  #   volumes:
  #     - mongo:/bitnami/mongodb
  #   networks:
  #     - org
